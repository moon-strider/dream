services:
  agent:
    command: sh -c 'bin/wait && python -m deeppavlov_agent.run agent.pipeline_config=assistant_dists/dream_kg_prompted/pipeline_conf.json'
    environment:
      WAIT_HOSTS: "sentseg:8011, ranking-based-response-selector:8002, 
          ner:8021, entity-linking:8075, combined-classification:8087, entity-detection:8103, terminusdb-server:6363, 
          user-knowledge-memorizer:8027, property-extraction:8131, custom-entity-linking:8153, dff-knowledge-prompted-skill:8084, 
          sentence-ranker:8128, prompt-selector:8135, openai-api-chatgpt:8145"
      WAIT_HOSTS_TIMEOUT: ${WAIT_TIMEOUT:-1000}
      HIGH_PRIORITY_INTENTS: 1
      RESTRICTION_FOR_SENSITIVE_CASE: 1
      ALWAYS_TURN_ON_ALL_SKILLS: 0
      LANGUAGE: EN
      FALLBACK_FILE: fallbacks_dream_en.json

  sentseg:
    env_file: [.env]
    build:
      context: ./annotators/SentSeg/
    command: flask run -h 0.0.0.0 -p 8011
    environment:
      - FLASK_APP=server
    deploy:
      resources:
        limits:
          memory: 1.5G
        reservations:
          memory: 1.5G

  ranking-based-response-selector:
    env_file: [ .env ]
    build:
      args:
        SERVICE_PORT: 8002
        SERVICE_NAME: response_selector
        LANGUAGE: EN
        SENTENCE_RANKER_ANNOTATION_NAME: sentence_ranker
        SENTENCE_RANKER_SERVICE_URL: http://sentence-ranker:8128/respond
        SENTENCE_RANKER_TIMEOUT: 3
        N_UTTERANCES_CONTEXT: 5
        FILTER_TOXIC_OR_BADLISTED: 1
      context: .
      dockerfile: ./response_selectors/ranking_based_response_selector/Dockerfile
    command: flask run -h 0.0.0.0 -p 8002
    environment:
      - FLASK_APP=server
    deploy:
      resources:
        limits:
          memory: 100M
        reservations:
          memory: 100M

  ner:
    env_file: [ .env ]
    build:
      args:
        CONFIG: ner_case_agnostic_multilingual_bert_base_extended.json
        SERVICE_PORT: 8021
        SRC_DIR: annotators/NER_deeppavlov
        COMMIT: f5117cd9ad1e64f6c2d970ecaa42fc09ccb23144
      context: ./
      dockerfile: annotators/NER_deeppavlov/Dockerfile
    command: flask run -h 0.0.0.0 -p 8021
    environment:
      - FLASK_APP=server
      - CUDA_VISIBLE_DEVICES=7
    tty: true
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 2G

  entity-linking:
    env_file: [.env]
    build:
      args:
        CONFIG: entity_linking_eng.json
        SERVICE_PORT: 8075
        SRC_DIR: annotators/entity_linking
      context: ./
      dockerfile: annotators/entity_linking/Dockerfile
    environment:
      - CUDA_VISIBLE_DEVICES=7
    deploy:
      resources:
        limits:
          memory: 1.5G
        reservations:
          memory: 1.5G

  combined-classification:
    env_file: [.env]
    build:
      args:
        CONFIG: combined_classifier.json
        SERVICE_PORT: 8087
      context: .
      dockerfile: ./annotators/combined_classification/Dockerfile
    environment:
      - CUDA_VISIBLE_DEVICES=7
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 2G
 
  entity-detection:
    env_file: [.env]
    build:
      args:
        SEQ_TAG_CONFIG: wikipedia_entity_detection_distilbert.json
        CONFIG: entity_detection_eng.json
        LOWERCASE: 1
        SERVICE_PORT: 8103
        SRC_DIR: annotators/entity_detection/
        FINEGRAINED: 0
      context: ./
      dockerfile: annotators/entity_detection/Dockerfile
    command: flask run -h 0.0.0.0 -p 8103
    environment:
      - FLASK_APP=server
      - CUDA_VISIBLE_DEVICES=7
    deploy:
      resources:
        limits:
          memory: 2.5G
        reservations:
          memory: 2.5G
  
  terminusdb-server:
    image: terminusdb/terminusdb-server:v10.1.10

  custom-entity-linking:
    env_file: [.env]
    build:
      args:
        CONFIG: custom_entity_linking.json
        SERVICE_PORT: 8153
        SRC_DIR: annotators/custom_entity_linking
      context: ./
      dockerfile: annotators/custom_entity_linking/Dockerfile
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 128M

  property-extraction:
    env_file: [.env]
    build:
      args:
        CONFIG_T5: t5_generative_ie_infer.json
        CONFIG_REL_RANKER: rel_ranking_roberta.json
        SERVICE_PORT: 8131
        SRC_DIR: annotators/property_extraction/
      context: ./
      dockerfile: annotators/property_extraction/Dockerfile
    command: flask run -h 0.0.0.0 -p 8131
    environment:
      - FLASK_APP=server
      - CUDA_VISIBLE_DEVICES=4
    deploy:
      resources:
        limits:
          memory: 7G
        reservations:
          memory: 7G

  user-knowledge-memorizer:
    env_file: [ .env, .env_secret ]
    build:
      args:
        SERVICE_PORT: 8027
        SRC_DIR: annotators/user_knowledge_memorizer/
        SERVICE_NAME: user_knowledge_memorizer
        TERMINUSDB_SERVER_URL: http://terminusdb-server:6363
        TERMINUSDB_SERVER_PASSWORD: root
        TERMINUSDB_SERVER_TEAM: admin
        TERMINUSDB_SERVER_DB: user_knowledge_db
        USER_KM_SERVICE_CONFIG: index_load_path.json
        GENERATIVE_SERVICE_URL: http://openai-api-chatgpt:8145/respond
        GENERATIVE_SERVICE_CONFIG: openai-chatgpt.json
        GENERATIVE_SERVICE_TIMEOUT: 120
        SENTENCE_RANKER_URL: http://sentence-ranker:8128/respond
        SENTENCE_RANKER_TIMEOUT: 5
        RELEVANT_KNOWLEDGE_THRESHOLD: 0.5
        ENVVARS_TO_SEND: OPENAI_API_KEY
        USE_KG_DATA: 1
      context: ./
      dockerfile: annotators/user_knowledge_memorizer/Dockerfile
    command: flask run -h 0.0.0.0 -p 8027
    environment:
      - FLASK_APP=server
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 256M

  prompt-selector:
    env_file: [ .env ]
    build:
      args:
        SERVICE_PORT: 8135
        SERVICE_NAME: prompt_selector
        N_SENTENCES_TO_RETURN: 3
        PROMPTS_TO_CONSIDER: knowledge
      context: .
      dockerfile: ./annotators/prompt_selector/Dockerfile
    command: flask run -h 0.0.0.0 -p 8135
    environment:
      - FLASK_APP=server
    deploy:
      resources:
        limits:
          memory: 100M
        reservations:
          memory: 100M

  sentence-ranker:
    env_file: [ .env ]
    build:
      args:
        SERVICE_PORT: 8128
        PRETRAINED_MODEL_NAME_OR_PATH: sentence-transformers/bert-base-nli-mean-tokens
      context: ./services/sentence_ranker/
    command: flask run -h 0.0.0.0 -p 8128
    environment:
      - CUDA_VISIBLE_DEVICES=7
      - FLASK_APP=server
    deploy:
      resources:
        limits:
          memory: 3G
        reservations:
          memory: 3G

  openai-api-chatgpt:
    env_file: [ .env ]
    build:
      args:
        SERVICE_PORT: 8145
        SERVICE_NAME: openai_api_chatgpt
        PRETRAINED_MODEL_NAME_OR_PATH: gpt-3.5-turbo
      context: .
      dockerfile: ./services/openai_api_lm/Dockerfile
    command: flask run -h 0.0.0.0 -p 8145
    environment:
      - FLASK_APP=server
    deploy:
      resources:
        limits:
          memory: 100M
        reservations:
          memory: 100M

  dff-knowledge-prompted-skill:
    env_file: [ .env, .env_secret ]
    build:
      args:
        SERVICE_PORT: 8084
        SERVICE_NAME: dff_knowledge_prompted_skill
        PROMPT_FILE: common/prompts/knowledge.json
        GENERATIVE_SERVICE_URL: http://openai-api-chatgpt:8145/respond
        GENERATIVE_SERVICE_CONFIG: openai-chatgpt.json
        GENERATIVE_TIMEOUT: 120
        N_UTTERANCES_CONTEXT: 7
        USER_KG_SERVICE_URL: http://user-knowledge-memorizer:8027/respond
        ENVVARS_TO_SEND: OPENAI_API_KEY
        USE_KG_DATA: 1
      context: .
      dockerfile: ./skills/dff_knowledge_prompted_skill/Dockerfile
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 128M

version: '3.7'