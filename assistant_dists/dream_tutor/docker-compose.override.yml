services:
  agent:
    command: sh -c 'bin/wait && python -m deeppavlov_agent.run agent.pipeline_config=assistant_dists/dream_tutor/pipeline_conf.json'
    environment:
      WAIT_HOSTS: "convers-evaluator-annotator:8004, sentseg:8011, convers-evaluation-selector:8009,
          badlisted-words:8018, language-mistakes-tracker:8129, gector:2102, intent-catcher:8014,
          dff-language-practice-skill:8130, dff-mistakes-review-skill:8131, dff-friendship-skill:8086, dff-template-skill:8120"
      WAIT_HOSTS_TIMEOUT: ${WAIT_TIMEOUT:-1000}
  convers-evaluator-annotator:
    env_file: [.env]
    build:
      args:
        CONFIG: conveval.json
        PORT: 8004
        DATA_URL: https://files.deeppavlov.ai/alexaprize_data/cobot_conveval2.tar.gz
      context: .
      dockerfile: ./annotators/ConversationEvaluator/Dockerfile
    environment:
      - CUDA_VISIBLE_DEVICES=0
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 2G

  badlisted-words:
    build:
      context: annotators/BadlistedWordsDetector
    command: flask run -h 0.0.0.0 -p 8018
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 256M
    env_file:
    - .env
    environment:
    - FLASK_APP=server
  
  convers-evaluation-selector:
    build:
      args:
        ACKNOWLEDGEMENT_PROBA: 0.3
        ADD_ACKNOWLEDGMENTS_IF_POSSIBLE: 1
        CALL_BY_NAME_PROBABILITY: 0.5
        GREETING_FIRST: 1
        IGNORE_DISLIKED_SKILLS: 0
        PRIORITIZE_NO_DIALOG_BREAKDOWN: 0
        PRIORITIZE_PROMTS_WHEN_NO_SCRIPTS: 1
        PRIORITIZE_SCRIPTED_SKILLS: 1
        PRIORITIZE_WITH_REQUIRED_ACT: 1
        PRIORITIZE_WITH_SAME_TOPIC_ENTITY: 1
        PROMPT_PROBA: 0.3
        RESTRICTION_FOR_SENSITIVE_CASE: 1
        TAG_BASED_SELECTION: 1
      context: .
      dockerfile: response_selectors/convers_evaluation_based_selector/Dockerfile
    command: flask run -h 0.0.0.0 -p 8009
    deploy:
      resources:
        limits:
          memory: 100M
        reservations:
          memory: 100M
    env_file:
    - .env
    environment:
    - FLASK_APP=server

  dff-template-skill:
    build:
      args:
        SERVICE_NAME: dff_template_skill
        SERVICE_PORT: 8120
      context: .
      dockerfile: skills/dff_template_skill/Dockerfile
    command: gunicorn --workers=1 server:app -b 0.0.0.0:8120 --reload
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 128M
    env_file:
    - .env

  dff-language-practice-skill:
    build:
      args:
        SERVICE_NAME: dff_language_practice_skill
        SERVICE_PORT: 8130
        LANGUAGE: EN
      context: .
      dockerfile: skills/dff_language_practice_skill/Dockerfile
    command: gunicorn --workers=1 server:app -b 0.0.0.0:8130 --reload
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 128M
    env_file:
    - .env

  dff-mistakes-review-skill:
    build:
      args:
        SERVICE_NAME: dff_mistakes_review_skill
        SERVICE_PORT: 8131
      context: .
      dockerfile: skills/dff_mistakes_review_skill/Dockerfile
    command: gunicorn --workers=1 server:app -b 0.0.0.0:8131 --timeout=600 --reload
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 128M
    env_file:
    - .env

  sentseg:
    build:
      context: annotators/SentSeg
    command: flask run -h 0.0.0.0 -p 8011
    deploy:
      resources:
        limits:
          memory: 1.5G
        reservations:
          memory: 1.5G
    env_file:
    - .env
    environment:
    - FLASK_APP=server
    
  language-mistakes-tracker:
    env_file: [ .env ]
    build:
      args:
        SERVICE_PORT: 8129
        SERVICE_NAME: language_mistakes_tracker
        SRC_DIR: annotators/language_mistakes_tracker
      context: .
      dockerfile: annotators/language_mistakes_tracker/Dockerfile
    command: flask run -h 0.0.0.0 -p 8129
    environment:
      - FLASK_APP=server
    deploy:
      resources:
        limits:
          memory: 128M 
        reservations:
          memory: 128M

  gector: # GPU is required
    build:
      args:
        SERVICE_NAME: gector
        SERVICE_PORT: 2102
      context: annotators/gector
      dockerfile: Dockerfile
    environment:
      # - FLASK_APP=server
      - STORE_DATA_ENABLE=true
      - CUDA_VISIBLE_DEVICES=0
    # command: flask run -h 0.0.0.0 -p 2102
    tty: true
    deploy:
      resources:
        limits:
          memory: 5G 
        reservations:
          memory: 5G

  intent-catcher:
    env_file: [.env]
    build:
      context: .
      dockerfile: ./annotators/IntentCatcherTransformers/Dockerfile
      args:
        SERVICE_PORT: 8014
        CONFIG_NAME: intents_model_dp_config.json
        INTENT_PHRASES_PATH: intent_phrases.json
    command:  python -m flask run -h 0.0.0.0 -p 8014
    environment:
      - FLASK_APP=server
      - CUDA_VISIBLE_DEVICES=0
    deploy:
      resources:
        limits:
          memory: 3.5G
        reservations:
          memory: 3.5G
  
  dff-friendship-skill:
    env_file: [.env]
    build:
      args:
        SERVICE_PORT: 8086
        SERVICE_NAME: dff_friendship_skill # has to be the same with skill dir name
      context: .
      dockerfile: ./skills/dff_friendship_skill/Dockerfile
    command: gunicorn --workers=1 server:app -b 0.0.0.0:8086
    # command:  flask run -h 0.0.0.0 -p 8086
    # environment:
    #   - FLASK_APP=server
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 256M

version: '3.7'
