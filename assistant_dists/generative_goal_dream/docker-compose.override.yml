services:
  agent:
    command: sh -c 'bin/wait && python -m deeppavlov_agent.run agent.channel=telegram agent.telegram_token=5781499366:AAEjZhIu10yaWUAoViBNUS6aspAirmYt4S8 agent.pipeline_config=assistant_dists/generative_goal_dream/pipeline_conf.json agent.db_config=assistant_dists/generative_goal_dream/db_conf.json'
    environment:
      WAIT_HOSTS: "convers-evaluator-annotator:8004, spacy-nounphrases:8006, convers-evaluation-selector:8009, 
          intent-catcher:8014, badlisted-words:8018, ner:8021, factoid-qa:8071, kbqa:8072,
          spelling-preprocessing:8074, entity-linking:8075, wiki-parser:8077, combined-classification:8087,
          dff-recommendation-skill-gpt:8123, dff-intent-responder-skill:8012, entity-detection:8103, dialogpt:8125, dff-template-skill:8120"
      WAIT_HOSTS_TIMEOUT: ${WAIT_TIMEOUT:-480}
  convers-evaluator-annotator:
    env_file: [.env]
    build:
      args:
        CONFIG: conveval.json
        PORT: 8004
        DATA_URL: https://files.deeppavlov.ai/alexaprize_data/cobot_conveval2.tar.gz
      context: .
      dockerfile: ./annotators/ConversationEvaluator/Dockerfile
    environment:
      - CUDA_VISIBLE_DEVICES=0
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 2G

  spacy-nounphrases:
    env_file: [.env]
    build:
      context: .
      dockerfile: ./annotators/spacy_nounphrases/Dockerfile
    command: flask run -h 0.0.0.0 -p 8006
    environment:
      - FLASK_APP=server
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 256M

  sentseg:
    env_file: [.env]
    build:
      context: ./annotators/SentSeg/
    command: flask run -h 0.0.0.0 -p 8011
    environment:
      - FLASK_APP=server
    deploy:
      resources:
        limits:
          memory: 1.5G
        reservations:
          memory: 1.5G

  convers-evaluation-selector:
    env_file: [.env]
    build:
      args:
        TAG_BASED_SELECTION: 1
        CALL_BY_NAME_PROBABILITY: 0.5
        PROMPT_PROBA: 0.3
        ACKNOWLEDGEMENT_PROBA: 0.3
        PRIORITIZE_WITH_REQUIRED_ACT: 1
        PRIORITIZE_NO_DIALOG_BREAKDOWN: 0
        PRIORITIZE_WITH_SAME_TOPIC_ENTITY: 1
        IGNORE_DISLIKED_SKILLS: 0
        GREETING_FIRST: 0
        RESTRICTION_FOR_SENSITIVE_CASE: 1
        PRIORITIZE_PROMTS_WHEN_NO_SCRIPTS: 1
        ADD_ACKNOWLEDGMENTS_IF_POSSIBLE: 1
        PRIORITIZE_SCRIPTED_SKILLS: 1
      context: .
      dockerfile: ./response_selectors/convers_evaluation_based_selector/Dockerfile
    command: flask run -h 0.0.0.0 -p 8009
    environment:
      - FLASK_APP=server
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 256M
    
  dff-intent-responder-skill:
    env_file: [ .env ]
    build:
      args:
        SERVICE_PORT: 8012
        SERVICE_NAME: dff_intent_responder_skill
        INTENT_RESPONSE_PHRASES_FNAME: intent_response_phrases.json
      context: .
      dockerfile: ./skills/dff_intent_responder_skill/Dockerfile
    command: gunicorn --workers=1 server:app -b 0.0.0.0:8012 --reload
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 128M

  intent-catcher:
    env_file: [.env]
    build:
      context: .
      dockerfile: ./annotators/IntentCatcherTransformers/Dockerfile
      args:
        SERVICE_PORT: 8014
        CONFIG_NAME: intents_model_dp_config.json
        INTENT_PHRASES_PATH: intent_phrases.json
    command:  python -m flask run -h 0.0.0.0 -p 8014
    environment:
      - FLASK_APP=server
      - CUDA_VISIBLE_DEVICES=0
    deploy:
      resources:
        limits:
          memory: 3.5G
        reservations:
          memory: 3.5G

  badlisted-words:
    env_file: [.env]
    build:
      context: annotators/BadlistedWordsDetector/
    command: flask run -h 0.0.0.0 -p 8018
    environment:
      - FLASK_APP=server
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 256M

  ner:
    env_file: [ .env ]
    build:
      args:
        CONFIG: ner_case_agnostic_multilingual_bert_base_extended.json
        PORT: 8021
        SRC_DIR: annotators/NER_deeppavlov
        COMMIT: f5117cd9ad1e64f6c2d970ecaa42fc09ccb23144
      context: ./
      dockerfile: annotators/NER_deeppavlov/Dockerfile
    command: flask run -h 0.0.0.0 -p 8021
    environment:
      - FLASK_APP=server
      - CUDA_VISIBLE_DEVICES=0
    tty: true
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 2G

  dummy-skill-dialog:
    env_file: [.env]
    build:
      args:
        DATA_URL: http://files.deeppavlov.ai/alexaprize_data/dummy_skill_dialog.tar.gz
      context: ./skills/dummy_skill_dialog/
    command: flask run -h 0.0.0.0 -p 8052 --without-threads
    environment:
      - FLASK_APP=server
    deploy:
      resources:
        limits:
          memory: 768M
        reservations:
          memory: 768M
         
  factoid-qa:
    env_file: [.env]
    build:
      context: .
      dockerfile: ./skills/factoid_qa/Dockerfile
    command: flask run -h 0.0.0.0 -p 8071
    environment:
      - FLASK_APP=server
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 256M

  entity-linking:
    env_file: [.env]
    build:
      args:
        CONFIG: kbqa_entity_linking_page.json
        PORT: 8075
        SRC_DIR: annotators/entity_linking
        COMMIT: 5b99ac3392e8e178e2bb4f9b218d4ddb2ec2e242
      context: ./
      dockerfile: annotators/entity_linking/Dockerfile
    environment:
      - CUDA_VISIBLE_DEVICES=0
    deploy:
      resources:
        limits:
          memory: 23G
        reservations:
          memory: 23G

  wiki-parser:
    env_file: [.env]
    build:
      args:
        WIKI_LITE_DB: http://files.deeppavlov.ai/kbqa/wikidata/wikidata_lite.hdt
        WIKI_LITE_INDEX_DB: http://files.deeppavlov.ai/kbqa/wikidata/wikidata_lite.hdt.index.v1-1
        WIKI_CACHE_DB: http://files.deeppavlov.ai/kbqa/wikidata/wikidata_cache.json
        CONFIG: wiki_parser.json
        PORT: 8077
        SRC_DIR: annotators/wiki_parser
        COMMIT: ff5b156d16a949c3ec99da7fb60ae907dec37a41
      context: ./
      dockerfile: annotators/wiki_parser/Dockerfile
    command: flask run -h 0.0.0.0 -p 8077
    environment:
      - CUDA_VISIBLE_DEVICES=''
      - FLASK_APP=server
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 256M

  text-qa:
    env_file: [.env]
    build:
      args:
        CONFIG: qa.json
        PORT: 8078
        COMMIT: 4b3e60c407644b750c9dc292ac6bf206081fb9d0
      context: services/text_qa
      dockerfile: Dockerfile
    command: flask run -h 0.0.0.0 -p 8078
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - FLASK_APP=server
    deploy:
      resources:
        limits:
          memory: 3G
        reservations:
          memory: 3G

  kbqa:
    env_file: [.env]
    build:
      args:
        CONFIG: kbqa_cq_mt_bert_lite.json
        PORT: 8072
        SRC_DIR: annotators/kbqa/
        COMMIT: 47adffa799cc8b04fa9af7b8842e9f5d76bfe2dc
      context: ./
      dockerfile: annotators/kbqa/Dockerfile
    command: flask run -h 0.0.0.0 -p 8072
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - FLASK_APP=server
    deploy:
      resources:
        limits:
          memory: 5G
        reservations:
          memory: 5G

  spelling-preprocessing:
    env_file: [.env]
    build:
      context: ./annotators/spelling_preprocessing/
    command: flask run -h 0.0.0.0 -p 8074
    environment:
      - FLASK_APP=server
    deploy:
      resources:
        limits:
          memory: 50M
        reservations:
          memory: 50M

  dff-grounding-skill:
    env_file: [.env]
    build:
      args:
        SERVICE_PORT: 8080
        SERVICE_NAME: dff_grounding_skill
      context: .
      dockerfile: ./skills/dff_grounding_skill/Dockerfile
    command: gunicorn --workers=1 server:app -b 0.0.0.0:8080 --reload
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 128M

  knowledge-grounding:
    env_file: [.env]
    build:
      args:
        MODEL_CKPT: 3_sent_62_epochs
        DATA_ARG: http://files.deeppavlov.ai/alexaprize_data/parlai_grounding_knowledge/parlai_topical_chat_data.tar.gz
        MODEL1_ARG: http://files.deeppavlov.ai/alexaprize_data/parlai_grounding_knowledge/topical_chat_blender90_1_sent_48_epochs.tar.gz
        MODEL2_ARG: http://files.deeppavlov.ai/alexaprize_data/parlai_grounding_knowledge/topical_chat_blender90_3_sent_62_epochs.tar.gz
      context: ./services/knowledge_grounding/
    command: flask run -h 0.0.0.0 -p 8083
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - FLASK_APP=server
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 4G

  entity-storer:
    env_file: [.env]
    build:
      context: .
      dockerfile: annotators/entity_storer/Dockerfile
      args:
        WORK_DIR: annotators/entity_storer
        SERVICE_PORT: 8089
    command: flask run -h 0.0.0.0 -p 8089
    environment:
      - FLASK_APP=server
    deploy:
      resources:
        limits:
          memory: 384M
        reservations:
          memory: 384M

  knowledge-grounding-skill:
    env_file: [.env]
    build:
      context: .
      dockerfile: ./skills/knowledge_grounding_skill/Dockerfile
    command: python -m flask run -h 0.0.0.0 -p 8085
    environment:
      - CUDA_VISIBLE_DEVICES=''
      - FLASK_APP=server
    deploy:
      resources:
        limits:
          memory: 200M
        reservations:
          memory: 200M

  combined-classification:
    env_file: [.env]
    build:
      args:
        CONFIG: combined_classifier.json
        PORT: 8087
      context: .
      dockerfile: ./annotators/combined_classification/Dockerfile
    environment:
      - CUDA_VISIBLE_DEVICES=0
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 2G

  entity-detection:
    env_file: [.env]
    build:
      args:
        SEQ_TAG_CONFIG: src/wikipedia_entity_detection_distilbert.json
        EL_TAG_CONFIG: src/el_tags_infer.json
        CONFIG: entity_detection_eng.json
        LOWERCASE: 1
        PORT: 8103
        SRC_DIR: annotators/entity_detection/
        FINEGRAINED: 0
      context: ./
      dockerfile: annotators/entity_detection/Dockerfile
    command: flask run -h 0.0.0.0 -p 8103
    environment:
      - FLASK_APP=server
      - CUDA_VISIBLE_DEVICES=7
    deploy:
      resources:
        limits:
          memory: 2.5G
        reservations:
          memory: 2.5G

  dialogpt:
    env_file: [ .env ]
    build:
      args:
        SERVICE_PORT: 8125
        SERVICE_NAME: dialogpt
        PRETRAINED_MODEL_NAME_OR_PATH: microsoft/DialoGPT-large
        N_HYPOTHESES_TO_GENERATE: 7
        CONFIG_NAME: dialogpt_en.json
      context: ./services/dialogpt/
    command: flask run -h 0.0.0.0 -p 8125
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - FLASK_APP=server
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 2G

  dff-recommendation-skill-gpt:
    env_file: [.env]
    build:
      args:
        SERVICE_PORT: 8123
        SERVICE_NAME: dff_recommendation_skill_gpt
      context: .
      dockerfile: ./skills/dff_recommendation_skill_gpt/Dockerfile
    command: gunicorn --workers=1 server:app -b 0.0.0.0:8123 --reload
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 128M

  dff-template-skill:
    env_file: [.env]
    build:
      args:
        SERVICE_PORT: 8120
        SERVICE_NAME: dff_template_skill
      context: .
      dockerfile: ./skills/dff_template_skill/Dockerfile
    command: gunicorn --workers=1 server:app -b 0.0.0.0:8120 --reload
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 128M
version: '3.7'
